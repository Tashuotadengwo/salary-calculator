<!DOCTYPE html>
<html lang="zh">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>实时工资计算器</title>
  <style>
    body {
      margin: 0;
      padding: 0;
      font-family: 'Segoe UI', sans-serif;
      background: linear-gradient(135deg, #1e3c72, #2a5298);
      color: #fff;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      height: 100vh;
      overflow: hidden;
    }
    h1 {
      margin-bottom: 20px;
    }
    .input-group {
      margin: 10px 0;
    }
    input {
      padding: 10px;
      border: none;
      border-radius: 5px;
      width: 200px;
      font-size: 16px;
    }
    button {
      padding: 10px 20px;
      margin-top: 20px;
      font-size: 16px;
      background-color: #ff9800;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      color: #fff;
    }
    .stats {
      margin-top: 30px;
      text-align: center;
    }
    .stats div {
      margin: 10px 0;
      font-size: 18px;
    }
    .progress-bar {
      width: 80%;
      height: 20px;
      background-color: #555;
      border-radius: 10px;
      overflow: hidden;
      margin-top: 20px;
    }
    .progress {
      height: 100%;
      background-color: #4caf50;
      width: 0%;
      transition: width 0.5s;
    }
    canvas {
      position: fixed;
      top: 0;
      left: 0;
      pointer-events: none;
      z-index: 9999;
    }
  </style>
</head>
<body>
  <h1>实时工资计算器</h1>
  <div class="input-group">
    <input type="number" id="hourlyRate" placeholder="请输入时薪（元）" />
  </div>
  <div class="input-group">
    <input type="number" id="workHours" placeholder="请输入工作时长（小时）" />
  </div>
  <button id="startButton">开始计时</button>
  <div class="stats" id="stats" style="display:none;">
    <div>已工作时间：<span id="elapsedTime">0</span> 秒</div>
    <div>当前收入：<span id="currentEarnings">0.00</span> 元</div>
    <div>每秒收入：<span id="perSecondEarnings">0.00</span> 元</div>
    <div class="progress-bar">
      <div class="progress" id="progressBar"></div>
    </div>
  </div>
  <canvas id="confettiCanvas"></canvas>
  <script>
    const startButton = document.getElementById('startButton');
    const hourlyRateInput = document.getElementById('hourlyRate');
    const workHoursInput = document.getElementById('workHours');
    const stats = document.getElementById('stats');
    const elapsedTimeDisplay = document.getElementById('elapsedTime');
    const currentEarningsDisplay = document.getElementById('currentEarnings');
    const perSecondEarningsDisplay = document.getElementById('perSecondEarnings');
    const progressBar = document.getElementById('progressBar');
    const confettiCanvas = document.getElementById('confettiCanvas');
    const ctx = confettiCanvas.getContext('2d');
    let width = window.innerWidth;
    let height = window.innerHeight;
    confettiCanvas.width = width;
    confettiCanvas.height = height;

    window.addEventListener('resize', () => {
      width = window.innerWidth;
      height = window.innerHeight;
      confettiCanvas.width = width;
      confettiCanvas.height = height;
    });

    let animationFrameId;
    let confettiParticles = [];

    function createConfetti() {
      const colors = ['#ff0', '#f0f', '#0ff', '#0f0', '#f00', '#00f'];
      for (let i = 0; i < 100; i++) {
        confettiParticles.push({
          x: Math.random() * width,
          y: Math.random() * height - height,
          r: Math.random() * 6 + 4,
          d: Math.random() * 10 + 10,
          color: colors[Math.floor(Math.random() * colors.length)],
          tilt: Math.floor(Math.random() * 10) - 10,
          tiltAngleIncremental: (Math.random() * 0.07) + 0.05,
          tiltAngle: 0
        });
      }
    }

    function drawConfetti() {
      ctx.clearRect(0, 0, width, height);
      confettiParticles.forEach((p, index) => {
        ctx.beginPath();
        ctx.lineWidth = p.r;
        ctx.strokeStyle = p.color;
        ctx.moveTo(p.x + p.tilt + p.r / 2, p.y);
        ctx.lineTo(p.x + p.tilt, p.y + p.tilt + p.r / 2);
        ctx.stroke();
      });
      updateConfetti();
      animationFrameId = requestAnimationFrame(drawConfetti);
    }

    function updateConfetti() {
      confettiParticles.forEach((p, index) => {
        p.tiltAngle += p.tiltAngleIncremental;
        p.y += (Math.cos(p.d) + 3 + p.r / 2) / 2;
        p.x += Math.sin(p.d);
        p.tilt = Math.sin(p.tiltAngle - index / 3) * 15;

        if (p.y > height) {
          p.y = -10;
          p.x = Math.random() * width;
        }
      });
    }

    function startConfetti() {
      createConfetti();
      drawConfetti();
      setTimeout(() => {
        cancelAnimationFrame(animationFrameId);
        confettiParticles = [];
        ctx.clearRect(0, 0, width, height);
      }, 3000);
    }

    startButton.addEventListener('click', () => {
      const hourlyRate = parseFloat(hourlyRateInput.value);
      const workHours = parseFloat(workHoursInput.value);
      if (isNaN(hourlyRate) || isNaN(workHours) || hourlyRate <= 0 || workHours <= 0) {
        alert('请输入有效的时薪和工作时长！');
        return;
      }

      const totalSeconds = workHours * 3600;
      const perSecondEarnings = hourlyRate / 3600;
      let elapsedSeconds = 0;
      let currentEarnings = 0;
      let lastConfettiEarnings = 0;

      stats.style.display = 'block';
      perSecondEarningsDisplay.textContent = perSecondEarnings.toFixed(4);
      startButton.disabled = true;
      hourlyRateInput.disabled = true;
      workHoursInput.disabled = true;

      const intervalId = setInterval(() => {
        if (elapsedSeconds >= totalSeconds) {
          clearInterval(intervalId);
          startButton.disabled = false;
          hourlyRateInput.disabled = false;
          workHoursInput.disabled = false;
          return;
        }

        elapsedSeconds++;
        currentEarnings += perSecondEarnings;
        elapsedTimeDisplay.textContent = elapsedSeconds;
        currentEarningsDisplay.textContent = currentEarnings.toFixed(2);
        const progressPercent = (elapsedSeconds / totalSeconds) * 100;
        progressBar.style.width = progressPercent + '%';

        if (Math.floor(currentEarnings / 100) > Math.floor(lastConfettiEarnings / 100)) {
          startConfetti();
          lastConfettiEarnings = currentEarnings;
        }
      }, 1000);
    });
  </script>
</body>
</html>
